// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  plan          String    @default("free") // "free", "pro", "enterprise"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  images        GeneratedImage[]
  chatSessions  ChatSession[]

  @@map("users")
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String?  // Auto-generated from first prompt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  role          String   // "user" | "assistant"
  content       String   @db.Text
  type          String   // "text" | "image"
  status        String?  // "generating" | "completed" | "failed" for assistant messages
  imageUrls     String[] // Array of final image URLs
  metadata      Json?    // Store generation metadata (providers, models, etc.)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GeneratedImage {
  id              String   @id @default(cuid())
  userId          String
  prompt          String   @db.Text
  // S3 storage fields (primary)
  s3Key           String?  // S3 object key
  s3Url           String?  // Public S3 URL
  s3Bucket        String?  // S3 bucket name
  
  // Legacy/fallback storage fields
  imageUrl        String?  // Legacy: stored image URL (for backwards compatibility)
  originalUrl     String?  // Original provider URL (temporary)
  storedPathname  String?  // For deletion from blob storage (legacy)
  imagePath       String?  // File path relative to uploads directory (fallback)
  
  mimeType        String?  // MIME type (image/png, image/jpeg, image/svg+xml, etc.)
  filename        String?  // Original filename or generated name
  
  provider        String   // "openai", "stability", "replicate", "google"
  model           String?  // Model used
  width           Int      @default(1024)
  height          Int      @default(1024)
  steps           Int?     @default(20)
  isFavorite      Boolean  @default(false)
  isPublic        Boolean  @default(false)
  deleted         Boolean  @default(false) // Soft delete flag (for free plan auto-deletion)
  deletedAt       DateTime? // When the image was marked for deletion
  autoDeleteAt    DateTime? // When the image should be auto-deleted (free plan: 7 days)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_images")
}
