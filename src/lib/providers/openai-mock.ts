// Mock OpenAI provider for testing - uses placeholder images
import type { OpenAIGenerateParams, OpenAIGenerateResponse } from "./openai";

function generateColorFromPrompt(prompt: string): string {
  // Generate a deterministic color based on the prompt
  let hash = 0;
  for (let i = 0; i < prompt.length; i++) {
    const char = prompt.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // Convert to 32-bit integer
  }

  const hue = Math.abs(hash) % 360;
  const saturation = 60 + (Math.abs(hash >> 8) % 40); // 60-100%
  const lightness = 40 + (Math.abs(hash >> 16) % 30); // 40-70%

  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
}

function generateMockImageDataURL(
  prompt: string,
  width = 1024,
  height = 1024
): string {
  // Create a simple gradient SVG based on the prompt
  const color1 = generateColorFromPrompt(prompt);
  const color2 = generateColorFromPrompt(prompt + "_secondary");

  // Simple text truncation for display
  const displayText =
    prompt.length > 50 ? prompt.substring(0, 47) + "..." : prompt;

  const svg = `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 ${width} ${height}">
    <defs>
      <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:${color1};stop-opacity:1" />
        <stop offset="100%" style="stop-color:${color2};stop-opacity:1" />
      </linearGradient>
    </defs>
    <rect width="100%" height="100%" fill="url(#grad1)" />
    <circle cx="25%" cy="25%" r="10%" fill="rgba(255,255,255,0.1)" />
    <circle cx="75%" cy="75%" r="15%" fill="rgba(255,255,255,0.05)" />
    <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="rgba(255,255,255,0.9)" text-anchor="middle" dominant-baseline="middle">
      ðŸŽ¨ Mock Image
    </text>
    <text x="50%" y="60%" font-family="Arial, sans-serif" font-size="16" fill="rgba(255,255,255,0.7)" text-anchor="middle" dominant-baseline="middle">
      "${displayText}"
    </text>
    <text x="50%" y="90%" font-family="Arial, sans-serif" font-size="12" fill="rgba(255,255,255,0.5)" text-anchor="middle" dominant-baseline="middle">
      Generated by OpenAI Mock Provider
    </text>
  </svg>`;

  // Convert SVG to data URL
  const encodedSvg = encodeURIComponent(svg);
  return `data:image/svg+xml,${encodedSvg}`;
}

export async function generateWithOpenAIMock(
  params: OpenAIGenerateParams
): Promise<OpenAIGenerateResponse> {
  const { prompt, size = "1024x1024", n = 1 } = params;

  console.log(`[MOCK] Generating ${n} image(s) for prompt: "${prompt}"`);

  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Parse size parameter
  const [width, height] = size.split("x").map(Number);

  // Generate multiple images if n > 1
  const images = [];
  for (let i = 0; i < n; i++) {
    // Add slight variation for multiple images
    const modifiedPrompt = n > 1 ? `${prompt} (variation ${i + 1})` : prompt;
    const mockImageUrl = generateMockImageDataURL(
      modifiedPrompt,
      width,
      height
    );
    images.push(mockImageUrl);
  }

  return {
    images,
    usage: {
      total_tokens: prompt.length * n,
    },
  };
}
