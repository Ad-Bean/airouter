import { GoogleAuth } from 'google-auth-library';

export interface GoogleGenerateParams {
  prompt: string;
  model?:
    | 'imagen-4-preview'
    | 'imagen-4-standard'
    | 'imagen-4-ultra'
    | 'imagen-3'
    | 'imagen-4.0-generate-preview-06-06';
  sampleCount?: number;
  aspectRatio?: string;
  safetySetting?: string;
  personGeneration?: string;
  addWatermark?: boolean;
  seed?: number;
  enhancePrompt?: boolean;
}

export interface GoogleGenerateResponse {
  images: string[];
  usage?: {
    prediction_id?: string;
  };
  model?: string;
}

let auth: GoogleAuth | null = null;

function getGoogleAuth(): GoogleAuth {
  if (!auth) {
    if (!process.env.GOOGLE_CLOUD_PROJECT) {
      throw new Error('GOOGLE_CLOUD_PROJECT environment variable not set');
    }
    if (!process.env.GOOGLE_CLOUD_LOCATION) {
      throw new Error('GOOGLE_CLOUD_LOCATION environment variable not set');
    }

    const authOptions: {
      scopes: string[];
      credentials?: Record<string, unknown>;
    } = {
      scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    };

    if (process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
      try {
        authOptions.credentials = JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON);
      } catch {
        throw new Error('Invalid GOOGLE_APPLICATION_CREDENTIALS_JSON format');
      }
    }
    // If GOOGLE_APPLICATION_CREDENTIALS is set, GoogleAuth will use it automatically
    // If running in Google Cloud, it will use the default service account

    auth = new GoogleAuth(authOptions);
  }
  return auth;
}

export async function generateWithGoogle(
  params: GoogleGenerateParams,
): Promise<GoogleGenerateResponse> {
  const {
    prompt,
    model = 'imagen-4-preview',
    sampleCount = 1,
    aspectRatio = '1:1',
    safetySetting = 'block_medium_and_above',
    personGeneration = 'allow_adult',
    addWatermark = true,
    seed,
    enhancePrompt = false,
  } = params;

  try {
    const googleAuth = getGoogleAuth();
    const accessToken = await googleAuth.getAccessToken();

    if (!accessToken) {
      throw new Error('Failed to get Google Cloud access token');
    }

    const project = process.env.GOOGLE_CLOUD_PROJECT;
    const location = process.env.GOOGLE_CLOUD_LOCATION;

    // Map model names to API endpoints
    const modelEndpoints: Record<string, string> = {
      'imagen-4-preview': 'imagen-4.0-generate-preview-06-06',
      'imagen-4-standard': 'imagen-4.0-generate-standard-06-06',
      'imagen-4-ultra': 'imagen-4.0-generate-ultra-06-06',
      'imagen-3': 'imagen-3.0-generate-001',
      'imagen-4.0-generate-preview-06-06': 'imagen-4.0-generate-preview-06-06', // Legacy support
    };

    const apiModel = modelEndpoints[model] || model;
    const endpoint = `https://${location}-aiplatform.googleapis.com/v1/projects/${project}/locations/${location}/publishers/google/models/${apiModel}:predict`;

    const requestBody = {
      instances: [
        {
          prompt: prompt,
        },
      ],
      parameters: {
        sampleCount: sampleCount,
        aspectRatio: aspectRatio,
        safetySetting: safetySetting,
        personGeneration: personGeneration,
        addWatermark: addWatermark,
        ...(seed !== undefined && { seed }),
        enhancePrompt: enhancePrompt,
      },
    };

    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json; charset=utf-8',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Google Vertex AI API Error Details:', {
        status: response.status,
        statusText: response.statusText,
        errorBody: errorText,
        endpoint,
        requestBody,
      });
      throw new Error(
        `Google Vertex AI API error: ${response.status} ${response.statusText}\n${errorText}`,
      );
    }

    const data = await response.json();

    console.log('\n\nGoogle Vertex AI response:', data);

    if (!data.predictions || !Array.isArray(data.predictions)) {
      throw new Error('Invalid response format from Google Vertex AI API');
    }

    // Extract images from the response
    const images: string[] = [];
    let errorMessage = null;

    for (const prediction of data.predictions) {
      if (prediction.bytesBase64Encoded) {
        // Convert base64 to data URL
        images.push(`data:image/png;base64,${prediction.bytesBase64Encoded}`);
      } else if (prediction.raiFilteredReason) {
        // Handle content filtered by Google's Responsible AI
        errorMessage = prediction.raiFilteredReason;
      }
    }

    if (images.length === 0) {
      if (errorMessage) {
        throw new Error(`Google Vertex AI filtered the content: ${errorMessage}`);
      } else {
        throw new Error('No images generated by Google Vertex AI');
      }
    }

    return {
      images,
      usage: {
        prediction_id: data.metadata?.predictionId,
      },
      model,
    };
  } catch (error) {
    console.error('Google Vertex AI generation error:', error);
    throw error;
  }
}
