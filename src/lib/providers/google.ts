import { GoogleAuth } from "google-auth-library";

export interface GoogleGenerateParams {
  prompt: string;
  model?: string;
  sampleCount?: number;
  aspectRatio?: string;
  safetyFilterLevel?: string;
  personGeneration?: string;
}

export interface GoogleGenerateResponse {
  images: string[];
  usage?: {
    prediction_id?: string;
  };
}

let auth: GoogleAuth | null = null;

function getGoogleAuth(): GoogleAuth {
  if (!auth) {
    // Check for required environment variables
    if (!process.env.GOOGLE_CLOUD_PROJECT) {
      throw new Error("GOOGLE_CLOUD_PROJECT environment variable not set");
    }
    if (!process.env.GOOGLE_CLOUD_LOCATION) {
      throw new Error("GOOGLE_CLOUD_LOCATION environment variable not set");
    }

    auth = new GoogleAuth({
      scopes: ["https://www.googleapis.com/auth/cloud-platform"],
      // If running in Google Cloud, this will use the service account automatically
      // If running locally, set GOOGLE_APPLICATION_CREDENTIALS to your service account JSON file
    });
  }
  return auth;
}

export async function generateWithGoogle(
  params: GoogleGenerateParams
): Promise<GoogleGenerateResponse> {
  const {
    prompt,
    model = "imagen-4.0-generate-preview-06-06",
    sampleCount = 1,
    aspectRatio = "1:1",
    safetyFilterLevel = "block_some",
    personGeneration = "allow_adult",
  } = params;

  try {
    const googleAuth = getGoogleAuth();
    const accessToken = await googleAuth.getAccessToken();

    if (!accessToken) {
      throw new Error("Failed to get Google Cloud access token");
    }

    const project = process.env.GOOGLE_CLOUD_PROJECT;
    const location = process.env.GOOGLE_CLOUD_LOCATION;

    const endpoint = `https://${location}-aiplatform.googleapis.com/v1/projects/${project}/locations/${location}/publishers/google/models/${model}:predict`;

    const requestBody = {
      instances: [
        {
          prompt: prompt,
        },
      ],
      parameters: {
        sampleCount: sampleCount,
        aspectRatio: aspectRatio,
        safetyFilterLevel: safetyFilterLevel,
        personGeneration: personGeneration,
      },
    };

    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json; charset=utf-8",
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Google Vertex AI API error: ${response.status} ${response.statusText}\n${errorText}`
      );
    }

    const data = await response.json();

    if (!data.predictions || !Array.isArray(data.predictions)) {
      throw new Error("Invalid response format from Google Vertex AI API");
    }

    // Extract images from the response
    const images: string[] = [];
    for (const prediction of data.predictions) {
      if (prediction.bytesBase64Encoded) {
        // Convert base64 to data URL
        images.push(`data:image/png;base64,${prediction.bytesBase64Encoded}`);
      }
    }

    if (images.length === 0) {
      throw new Error("No images generated by Google Vertex AI");
    }

    return {
      images,
      usage: {
        prediction_id: data.metadata?.predictionId,
      },
    };
  } catch (error) {
    console.error("Google Vertex AI generation error:", error);
    throw error;
  }
}
